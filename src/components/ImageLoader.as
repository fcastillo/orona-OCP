/*** Gestiona la carga de imágenes del pasafotos.** @date 24/03/14* @author fer* @extends EventDispatcher*/package components{import flash.display.Loader;import flash.display.LoaderInfo;import flash.display.Sprite;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.IOErrorEvent;import flash.events.SecurityErrorEvent;import flash.net.URLRequest;import utils.XMLData;public class ImageLoader extends EventDispatcher	{		private var images:Array = [];		private var currentIndex:int = 0;				public function ImageLoader()		{		}				/**		 * Para asignar el array de urls de imágenes		 *		 * @param	images		 */		public function init(images:Array):void		{			this.images = images;		}				/**		 * Carga la imagen siguiente		 *		 * @param	holder  Receptor de la imagen		 */		public function getNext(holder:Sprite):void		{			while (holder.numChildren) holder.removeChildAt(0);			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e)				{					handle_imageComplete(e, holder)				});			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(e)				{					handle_loadError(e, holder)				});			loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(e)				{					handle_loadError(e, holder)				});            try{                var imagePath:String = "";                if(OCP.OCP_TYPE == OCP.OCP_PREVIEW)                {                    imagePath = images[currentIndex];                } else {                    imagePath = XMLData.contentsURL+XMLData.contentsURLSeparator+images[currentIndex];                }                var request:URLRequest = new URLRequest(imagePath);                loader.load(request);                setNextIndex();            }catch(e:Error){}		}        public function destroy():void        {        }				/**		 * La imagen se ha cargado con éxito, se emite el evento correspondiente		 *		 * @param	e		 * @param	holder		 */		private function handle_imageComplete(e:Event, holder:Sprite):void		{			var loader:LoaderInfo = LoaderInfo(e.target);			loader.removeEventListener(Event.COMPLETE, function()				{				});			loader.removeEventListener(IOErrorEvent.IO_ERROR, function()				{				});			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, function()				{				});            try{                var event:ImageLoaderEvent = new ImageLoaderEvent(ImageLoaderEvent.IMAGE_LOADED);                event.image = loader.content;                event.holder = holder;                dispatchEvent(event);            }   catch(e:Error){}		}				/**		 * Ha ocurrido un error al cargar la imagen, se emite el evento correspondiente		 *		 * @param	e		 * @param	holder		 */		private function handle_loadError(e:IOErrorEvent, holder:Sprite):void		{			var loader:LoaderInfo = LoaderInfo(e.target);			loader.removeEventListener(Event.COMPLETE, function()				{				});			loader.removeEventListener(IOErrorEvent.IO_ERROR, function()				{				});			loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, function()				{				});            try{                var event:ImageLoaderEvent = new ImageLoaderEvent(ImageLoaderEvent.IMAGE_ERROR);                event.holder = holder;                dispatchEvent(event);            } catch(e:Error){}		}				private function setNextIndex():void		{			currentIndex++;			if (currentIndex >= images.length)				currentIndex = 0;		}		}}